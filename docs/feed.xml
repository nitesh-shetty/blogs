<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-10-01T13:42:08+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Nitesh Shetty’s Blog</title><subtitle>My plan is to document the things I learn mainly on Linux eco-system.   In the process hope to improve my writing skills and your knowledge.  </subtitle><entry><title type="html">Workflow, Neomutt, Lei, Notmuch, Getmail, Gmail</title><link href="http://localhost:4000/linux/workflow/neomutt/notmuch/getmail/lei/gmail/2025/09/21/workflow-neomutt.html" rel="alternate" type="text/html" title="Workflow, Neomutt, Lei, Notmuch, Getmail, Gmail" /><published>2025-09-21T20:00:00+05:30</published><updated>2025-09-21T20:00:00+05:30</updated><id>http://localhost:4000/linux/workflow/neomutt/notmuch/getmail/lei/gmail/2025/09/21/workflow-neomutt</id><content type="html" xml:base="http://localhost:4000/linux/workflow/neomutt/notmuch/getmail/lei/gmail/2025/09/21/workflow-neomutt.html"><![CDATA[<p>This is a mail setup for terminal UI users. This uses combination of tools,<br />
<code class="language-plaintext highlighter-rouge">neomutt</code> for viewing mails,<br />
<code class="language-plaintext highlighter-rouge">notmuch</code> for filtering mails,<br />
<code class="language-plaintext highlighter-rouge">getmail</code> for fetching mails from gmail,<br />
<code class="language-plaintext highlighter-rouge">lei</code> for fetching mails from lore.kernel.org.<br />
For convinience, lets keep all the config files in ~/.lkml folder<br />
<code class="language-plaintext highlighter-rouge">mkdir -p ~/.lkml/mail</code></p>

<h1 id="lei">lei:</h1>
<p>Installation in Debian/Ubuntu:<br />
<code class="language-plaintext highlighter-rouge">sudo apt install -y lei</code></p>

<p>lei, helps with fetching mail from lore.kernel.org without subscribing to any
mailing list.<br />
lei, also has query features which helps in filtering the mails.<br />
For example to fetch mails from linux-block,linux-fsdevel mailing
list from last one day,<br />
below command should be useful.</p>

<p><code class="language-plaintext highlighter-rouge">$ lei q -I https://lore.kernel.org/all -o ~/.lkml/mail --threads 
    --dedupe=mid 
    '(tc:linux-block OR tc:linux-fsdevel) AND rt:1.days.ago..'</code></p>

<p>Here t and c indicate to and cc mail recipient respectively.<br />
Above query also edited later using lei edit-search.</p>

<p>Once the query is finalized, next time to fetch the mails, simply use<br />
<code class="language-plaintext highlighter-rouge">$ lei up ~/.lkml/mail</code></p>

<h1 id="notmuch">notmuch:</h1>
<p>Installation in Debian/Ubuntu:<br />
<code class="language-plaintext highlighter-rouge">sudo apt install -y notmuch</code></p>

<p>Above lei setup usually fetches and notmuch helps in filtering the mails<br />
Typically a notmuch has a config file in ~/.notmuch-config<br />
This file contains the path to fetch and store the filtered mails</p>

<p>With notmuch we can filter mails and attach tags to mails.
And this tag will be used by neomutt to create different virtual mailboxes.</p>

<p>To filter mails to/cc to linux-block and attach tag linux-block, we use
$ notmuch tag +linux-block – to:linux-block@vger.kernel.org</p>

<p>For more tagging batch queries, an input file can be passed.<br />
Lets say we create a file by name notmuch-tag-rules,<br />
<code class="language-plaintext highlighter-rouge">$ cat ~/.lkml/notmuch-tag-rules</code><br />
+linux-block – to:linux-block@vger.kernel.org<br />
+linux-fsdevel – to:linux-fsdevel@vger.kernel.org</p>

<p>This file looks similar to command line query, without ‘notmuch tag’
To run this batch tagging,<br />
<code class="language-plaintext highlighter-rouge">$ notmuch tag --batch --input=~/.lkml/notmuch-tag-rules</code></p>

<h1 id="neomutt">neomutt:</h1>
<p>Installation in Debian/Ubuntu:<br />
<code class="language-plaintext highlighter-rouge">sudo apt install -y lei</code></p>

<p>neomuttrc is config file, which can be passed to neomutt as argument.</p>
<h4 id="virtual-mailbox">virtual mailbox:</h4>
<p>virtual mailboxes help to arrange the mails.
lets say we want to put mails from linux-block under linux-block mailing list.<br />
    virtual-mailboxes “linux-block” “notmuch://?query=tag:linux-block”<br />
    virtual-mailboxes “linux-fsdevel” “notmuch://?query=tag:linux-fsdevel”</p>

<h4 id="syncfetch-mails">sync/fetch mails</h4>
<p>we make use of bash script to check and sync the mails.<br />
This script is combination fetching mails from lei and filtering mail
using notmuch.<br />
let’s say we name the script fetch.sh<br />
<code class="language-plaintext highlighter-rouge">$cat ~/.lkml/sync.sh</code><br />
lei up ~/.lkml/mail<br />
notmuch new<br />
notmuch tag –batch –input=~/.lkml/notmuch-tag-rules<br />
notmuch tag –remove-all +deleted tag:deleted</p>

<p>we assign F to fetch mail using, and save this in neomuttrc <br />
macro index F “<shell-escape>path_fetchmail_script 2&gt;&amp;1<enter>" "sync email and notmuch"</enter></shell-escape></p>

<p>Next I plan to add information about the neomuttrc and linking all together.<br />
I plan to update improvements here. Stay tuned !!</p>]]></content><author><name></name></author><category term="linux" /><category term="workflow" /><category term="neomutt" /><category term="notmuch" /><category term="getmail" /><category term="lei" /><category term="gmail" /><summary type="html"><![CDATA[This is a mail setup for terminal UI users. This uses combination of tools, neomutt for viewing mails, notmuch for filtering mails, getmail for fetching mails from gmail, lei for fetching mails from lore.kernel.org. For convinience, lets keep all the config files in ~/.lkml folder mkdir -p ~/.lkml/mail]]></summary></entry><entry><title type="html">Workflow, Neovim, tmux and plugins</title><link href="http://localhost:4000/linux/workflow/neovim/tmux/plugins/2025/09/14/workflow-neovim.html" rel="alternate" type="text/html" title="Workflow, Neovim, tmux and plugins" /><published>2025-09-14T20:00:00+05:30</published><updated>2025-09-14T20:00:00+05:30</updated><id>http://localhost:4000/linux/workflow/neovim/tmux/plugins/2025/09/14/workflow-neovim</id><content type="html" xml:base="http://localhost:4000/linux/workflow/neovim/tmux/plugins/2025/09/14/workflow-neovim.html"><![CDATA[<p>My typical workflow in Ubuntu/Debian involves,<br />
Neovim as editor, Tmux for window/session management.</p>

<h1 id="tldr">TL,DR</h1>
<p>I usually put things inside scripts, instead of setting up tools and configs everytime,<br />
Below steps should help you to setup neovim and tmux and use the keymap to get started.<br />
<code class="language-plaintext highlighter-rouge">git clone https://github.com/nitesh-shetty/helper_scripts.git</code><br />
<code class="language-plaintext highlighter-rouge">cd helper_scripts/ubuntu</code><br />
<code class="language-plaintext highlighter-rouge">chmod a+x ./setup.sh</code><br />
<code class="language-plaintext highlighter-rouge">./setup.sh nvim</code><br />
<code class="language-plaintext highlighter-rouge">./setup.sh tmux</code></p>

<h2 id="keymaps">Keymaps</h2>
<h2 id="neovim-useful-keymaps">neovim useful keymaps</h2>
<p>To see all the currently opened file,<br />
<code class="language-plaintext highlighter-rouge">space+space</code></p>

<p>To search files,<br />
<code class="language-plaintext highlighter-rouge">space s f</code><br />
you need to press space, first followed by s, followed by f</p>

<p>To grep a string,<br />
<code class="language-plaintext highlighter-rouge">space s g</code></p>

<h2 id="tmux-useful-keymaps">tmux useful keymaps</h2>

<p>Start a tmux session<br />
<code class="language-plaintext highlighter-rouge">tmux new -s project</code></p>

<p>To detach without, closing the session<br />
<code class="language-plaintext highlighter-rouge">ctrl+a d</code><br />
here you need to press ctrl and a together, followed by pressing d.</p>

<h3 id="tmux-panes-windows-sessions">tmux panes, windows, sessions:</h3>
<p>By default when you open a new session, you get a single pane and single window.<br />
Then you can create multiple panes inside a single window.<br />
Multiple windows create a session.</p>

<p>A typical scenario where this might happen is.<br />
Lets say you are working with multiple virtual machines.<br />
I usually prefer to keep a single window for each VM along with renaming each window.<br />
In one terminal usually mail is opened. So no need to open multiple session.</p>

<h4 id="creating-multiple-panes">Creating multiple panes:</h4>
<p>Splitting the window and creating panes,<br />
I felt | and - are intuitive of vertical and horizontal split respectively.<br />
Hence,<br />
To vertically split the window,<br />
<code class="language-plaintext highlighter-rouge">ctrl+a shift+\</code><br />
or<br />
<code class="language-plaintext highlighter-rouge">ctrl+a |</code></p>

<p>To horizontally split the window,<br />
<code class="language-plaintext highlighter-rouge">ctrl+a shift+-</code><br />
or<br />
<code class="language-plaintext highlighter-rouge">ctrl+a _</code></p>

<p>You can check in ~/tmux.conf and change the keymap to your convience,<br />
just check for split-window.</p>

<p>Since panes are smaller and you want to full-screen the pane you are working on.<br />
<code class="language-plaintext highlighter-rouge">ctrl+a z</code></p>

<p>Since I also integrated tmux-navigator and premmaped tmux keys mapping ~/.tmux.conf,<br />
below should be useful to move between panes.</p>

<p>Move ‘up’ to pane above:<br />
<code class="language-plaintext highlighter-rouge">ctrl k</code></p>

<p>Move ‘down’ to pane below:<br />
<code class="language-plaintext highlighter-rouge">ctrl j</code></p>

<p>Move ‘left’ to pane:<br />
<code class="language-plaintext highlighter-rouge">ctrl h</code></p>

<p>Move ‘right’ to pane:<br />
<code class="language-plaintext highlighter-rouge">ctrl l</code></p>

<h4 id="creating-multiple-windows">Creating multiple windows:</h4>
<p>To create a new window<br />
<code class="language-plaintext highlighter-rouge">ctrl+a c</code></p>

<p>To rename a window<br />
<code class="language-plaintext highlighter-rouge">ctrl+a ,</code></p>

<p>To move to next window<br />
<code class="language-plaintext highlighter-rouge">ctrl+a n</code></p>

<p>To move to previous window<br />
<code class="language-plaintext highlighter-rouge">ctrl+a p</code></p>

<p>To move to 2nd window<br />
<code class="language-plaintext highlighter-rouge">ctrl+a 2</code><br />
Similarly you can replace 2 to any nth window.</p>

<h4 id="resizing-the-panes">Resizing the panes:</h4>
<p>To expand the current pane up:<br />
<code class="language-plaintext highlighter-rouge">ctrl+a k</code></p>

<p>To expand the current pane down:<br />
<code class="language-plaintext highlighter-rouge">ctrl+a j</code></p>

<p>To expand the current pane left:<br />
<code class="language-plaintext highlighter-rouge">ctrl+a h</code></p>

<p>To expand the current pane right:<br />
<code class="language-plaintext highlighter-rouge">ctrl+a l</code></p>

<h1 id="long-read">Long read</h1>
<p>To know about how helper_script setups the neovim and tmux,</p>
<h1 id="neovim">Neovim:</h1>
<p>Ubuntu/Debian neovim installation:<br />
<code class="language-plaintext highlighter-rouge">sudo apt install -y neovim</code></p>

<p>If you are familiar with vi/vim, neovim has similar navigation keymap.<br />
I would suggest to go through vimtutor, after installation.<br />
Most of my plugin management comes from <a href="https://github.com/nvim-lua/kickstart.nvim">kickstart.nvim</a>.<br />
For kernel development, there is extra plugin for vim options.<br />
Since I use tmux along with neovim, tmux_navigator.lua helps to
navigate across multiple tmux panes and vim windows.</p>

<p>Configuring kickstart.nvim,<br />
<code class="language-plaintext highlighter-rouge">git clone https://github.com/nvim-lua/kickstart.nvim.git ~/.config/nvim</code></p>

<h3 id="plugins">plugins:</h3>
<p><em>vim_options</em>:<br />
This is my customization carried from previous my previous vim legacy.<br />
Some of the key bindings are related to Linux kernel developement such as,<br />
getting to know we should wrap around at column 80.<br />
Configuration:<br />
<code class="language-plaintext highlighter-rouge">wget https://github.com/nitesh-shetty/dotfiles/blob/main/vim_options.lua ~/.config/nvim/lua/custom/plugins/vim_options.lua</code></p>

<p><em>tmux_navigator.lua</em>:<br />
This plugin helps to navigate from neovim to other terminal when using inside tmux.<br />
Configuration:<br />
<code class="language-plaintext highlighter-rouge">wget https://github.com/nitesh-shetty/dotfiles/blob/main/tmux_navigator.lua ~/.config/nvim/lua/custom/plugins/tmux_navigator.lua</code></p>

<p><em>vimtex.lua</em>:
This plugin is realted to latex, here we configure vimtex view method as zathura.<br />
If you not using latex, you can skip this step.<br />
Configuration:<br />
<code class="language-plaintext highlighter-rouge">wget https://github.com/nitesh-shetty/dotfiles/blob/main/vimtex.lua ~/.config/nvim/lua/custom/plugins/vimtex.lua</code></p>

<p>Lets say, you are inside neovim editor and want to move to right side pane then press,<br />
<code class="language-plaintext highlighter-rouge">ctrl + l</code> 
similarly other keys,<br />
<code class="language-plaintext highlighter-rouge">ctrl + h</code> for moving to left pane<br />
<code class="language-plaintext highlighter-rouge">ctrl + j</code> for moving to down pane<br />
<code class="language-plaintext highlighter-rouge">ctrl + k</code> for moving to up pane<br />
<code class="language-plaintext highlighter-rouge">ctrl + l</code> for moving to right pane</p>

<blockquote>
  <p>leaderkey  or mapleaderkey or prefix</p>
</blockquote>

<p>To trigger any command related to neovim you need to press a combination of keys,<br />
called as mapleaderkey.
This is usually stored in neovim config file, which can be found in ~/.config/nvim/init.lua.<br />
My leaderkey is default ‘space key’. My init file is <a href="https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua">here</a><br />
You can change it by editing ‘vim.g.mapleaderkey’ in  ~/.config/nvim/init.lua</p>

<h1 id="tmux">Tmux:</h1>
<p>Ubuntu/Debian tmux installation:<br />
<code class="language-plaintext highlighter-rouge">sudo apt install -y tmux</code></p>

<p>If you are working on remote Linux desktop, tmux helps to create multiple session, panes.<br />
Another advantage is you can keep the session alive even your network connection is lost.<br />
Effectively, your tmux session is saved until the PC is on.</p>

<blockquote>
  <p>prefix</p>
</blockquote>

<p>To trigger any command related to tmux you need to press a combination of keys,<br />
called as prefix.
This is usually stored in tmux config file, which can be found in<br />
~/.tmux.conf. My tmux.conf can be found <a href="https://github.com/nitesh-shetty/dotfiles/blob/main/tmux.conf">here</a><br />
<code class="language-plaintext highlighter-rouge">wget https://github.com/nitesh-shetty/dotfiles/blob/main/tmux.conf ~/.tmux.conf</code><br />
Default key mapping for tmux is ctrl+b (press ‘control’ and ‘b’ key simultaneously),<br />
but I changed it to ctrl+a, for convenience.
You can change it by editing ‘prefix’ in<br />
~/tmux.conf</p>

<h4 id="tmux-plugins">tmux plugins:</h4>
<p>Tmux comes with plugin management, such as <a href="https://github.com/tmux-plugins/tpm">tpm</a>.<br />
<code class="language-plaintext highlighter-rouge">git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm</code></p>

<p><em>tmux-continuum</em>: this plugin saves the tmux sessions every 15 minutes<br />
<em>tmux-resurrect</em>: this plugin helps to recover the previously saved session
from tmux-continuum<br />
<em>tmux-themepack</em>: jimeh/tmux-themepack gives a clean elegant look to tmux session<br />
Add below lines to ~/.tmux.conf if you want to integrate the above plugins.<br />
set -g @plugin ‘tmux-plugins/tpm’<br />
set -g @plugin ‘jimeh/tmux-themepack’<br />
set -g @plugin ‘tmux-plugins/tmux-resurrect’<br />
set -g @plugin ‘tmux-plugins/tmux-continuum’<br />
set -g @themepack ‘powerline/default/yellow’<br />
set -g @resurrect-capture-pane-contents ‘on’<br />
set -g @continuum-restore ‘on’<br />
run ‘~/.tmux/plugiins/tpm/tpm’</p>

<p>After adding above lines in ~/.tmux.conf, to install plugins<br />
<code class="language-plaintext highlighter-rouge">ctrl+a shift+i</code></p>]]></content><author><name></name></author><category term="linux" /><category term="workflow" /><category term="neovim" /><category term="tmux" /><category term="plugins" /><summary type="html"><![CDATA[My typical workflow in Ubuntu/Debian involves, Neovim as editor, Tmux for window/session management.]]></summary></entry></feed>